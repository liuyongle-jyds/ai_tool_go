'use client'

import { Dictionary } from '@/types/Dictionary'
import CusIcon from '../cus/cus-icon'
import { KeyboardEvent, useEffect, useState } from 'react'
import { Button } from '../ui/button'
import { cn } from '@/lib/utils'
import { debounce } from '@/utils'
import Category from '@/types/Categories'
import { ScrollArea, ScrollBar } from '../ui/scroll-area'
import Image from 'next/image'
import Link from 'next/link'
import Tool from '@/types/Tool'
import Experience from '@/types/Experience'
import { Separator } from '../ui/separator'
import { Triangle } from 'lucide-react'

const list1 = [
  {
    text: 'All Industries',
    id: '1',
  },
  {
    text: 'Electronic Commerce',
    id: '2',
  },
  {
    text: 'Program Development',
    id: '3',
  },
  {
    text: 'UI / UX',
    id: '4',
  },
  {
    text: 'Art',
    id: '5',
  },
  {
    text: 'Medical Treatment',
    id: '6',
  },
  {
    text: 'System',
    id: '7',
  },
  {
    text: 'Speech Recognition',
    id: '8',
  },
]

const list2 = [
  {
    text: 'All Functions',
    id: '1',
  },
  {
    text: 'Chat',
    id: '2',
  },
  {
    text: 'Photo Restoration',
    id: '3',
  },
  {
    text: 'Face Detection',
    id: '4',
  },
  {
    text: 'Speech Recognition',
    id: '5',
  },
  {
    text: 'E-commerce',
    id: '6',
  },
  {
    text: 'Article Writing',
    id: '7',
  },
  {
    text: 'Tourism',
    id: '8',
  },
  {
    text: 'System Safety',
    id: '9',
  },
  {
    text: 'Market Economy',
    id: '10',
  },
]

const list3: Tool[] = [
  {
    id: '1',
    head: '',
    ranking: 1,
    name: 'ChatGPT',
    creator: 'OpenAI',
    voted: true,
    vote: '36.8m',
    collected: true,
    collection: '32.6m',
    comment: '1,253',
    desc: 'The OpenAI API can be applied to almost any task that requires understanding or generating natural language and code. The OpenAI API can also be used to generate and edit images or convert speech into text.',
    tag: ['AI', 'Chat', 'Text Description'],
    tip: '”The GPT (Generative Pre Training Transformer) model of OpenAI can understand natural language and code after training, and GPT provides text output in response to its input.”',
  },
  {
    id: '2',
    head: '',
    ranking: 2,
    name: 'Google Gemini',
    creator: 'Google',
    voted: false,
    vote: '36.8m',
    collected: false,
    collection: '32.6m',
    comment: '1,253',
    desc: 'Gemini is an artificial intelligence model released by Google that can run on different platforms, from data centers to mobile devices.',
    tag: ['AI', 'Chat', 'Text Description'],
    tip: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
  },
  {
    id: '3',
    head: '',
    ranking: 3,
    name: 'Stable Diffusion',
    creator: 'Stability AI',
    voted: false,
    vote: '36.8m',
    collected: false,
    collection: '32.6m',
    comment: '1,253',
    desc: 'The Stable Diffusion open API allows developers to quickly obtain high-quality images generated by this powerful image generation model by simply providing a textual description.',
    tag: ['AI', 'Chat', 'Text Description'],
    tip: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
  },
  {
    id: '4',
    head: '',
    ranking: 4,
    name: 'Classical Chinese with One Heart',
    creator: 'Qianfan Big Model Platform',
    voted: false,
    vote: '36.8m',
    collected: false,
    collection: '32.6m',
    comment: '1,253',
    desc: 'The Baidu AI Cloud Qianfan platform provides a wealth of APIs, including API capabilities such as chat dialogue, continuation Completions, vector embeddings, plug-in applications, Prompt engineering, model services, management, tuning, and data management.',
    tag: ['AI', 'Chat', 'Text Description'],
    tip: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
  },
]

const list4: Experience[] = [
  {
    id: '1',
    ranking: 1,
    name: '”The GPT (Generative Pre Training Transformer) model of OpenAI can understand natural language and code after training, and GPT provides text output in response to its input.”',
    creator: 'Jane',
    voted: false,
    vote: '36.8m',
    job: 'Senior E-commerce Operations Manager',
  },
  {
    id: '2',
    ranking: 2,
    name: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
    creator: 'Jane',
    voted: true,
    vote: '36.8m',
    job: 'E-commerce Manager',
  },
  {
    id: '3',
    ranking: 3,
    name: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
    creator: 'Jane',
    voted: false,
    vote: '36.8m',
    job: 'E-commerce Manager',
  },
  {
    id: '4',
    ranking: 4,
    name: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
    creator: 'Jane',
    voted: false,
    vote: '36.8m',
    job: 'E-commerce Manager',
  },
  {
    id: '5',
    ranking: 5,
    name: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
    creator: 'Jane',
    voted: false,
    vote: '36.8m',
    job: 'E-commerce Manager',
  },
  {
    id: '6',
    ranking: 6,
    name: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
    creator: 'Jane',
    voted: false,
    vote: '36.8m',
    job: 'E-commerce Manager',
  },
  {
    id: '7',
    ranking: 7,
    name: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
    creator: 'Jane',
    voted: false,
    vote: '36.8m',
    job: 'E-commerce Manager',
  },
  {
    id: '8',
    ranking: 8,
    name: "”Gemma's two variant models: one for intelligent coding and the other for improving processing efficiency”",
    creator: 'Jane',
    voted: false,
    vote: '36.8m',
    job: 'E-commerce Manager',
  },
]

export default function IndexChild({ dict }: { dict: Dictionary }) {
  const [searchVal, setSearchVal] = useState('')
  const [isFocus, setIsFocus] = useState(false)
  const [loading, setLoading] = useState(false)
  const [categories1, setCategories1] = useState([] as Category[])
  const [categories2, setCategories2] = useState([] as Category[])
  const [active1, setActive1] = useState('1')
  const [active2, setActive2] = useState('')
  const [toolRanking, setToolRanking] = useState([] as Tool[])
  const [expRanking, setExpRanking] = useState([] as Experience[])

  const onSearch = () => {
    if (loading) return
    setLoading(true)
    setTimeout(() => {
      setLoading(false)
    }, 1000)
  }

  const handleInputKeydown = debounce(
    (e: KeyboardEvent<HTMLInputElement>) => {
      if (e.key !== 'Enter' || e.shiftKey || e.nativeEvent.isComposing) return
      e.preventDefault()
      onSearch()
    },
    400,
    true,
  )

  const onChangeActive1 = (id: string) => {
    setActive1(id)
  }

  const onChangeActive2 = (id: string) => {
    setActive2(id)
  }

  const rankingTitleDom = ({
    icon,
    title,
    href,
  }: {
    icon: string
    title: string
    href: string
  }) => {
    return (
      <div className='mb-5 flex items-center justify-between'>
        <div className='flex items-center'>
          <Image
            src={icon}
            alt='rank tool icon'
            width={32}
            height={32}
            className='h-8 w-8'
            priority
          />
          <div className='h-1 w-2'></div>
          <h3 className='text-2xl font-semibold'>{title}</h3>
        </div>
        <Link
          href={href}
          title={title}
          className='flex cursor-pointer items-center text-t3'
        >
          <span className='font-medium'>{dict.index['See All']}</span>
          <div className='h-1 w-1'></div>
          <CusIcon name='arrow-right' className='h-4 w-4' />
        </Link>
      </div>
    )
  }

  const rankingNumDom = (rank: number, isExp = false) => {
    if (rank > 3) {
      return (
        <div className='flex h-6 w-6 items-center justify-center rounded-full bg-foreground text-t2'>
          {rank}
        </div>
      )
    }
    const icon = `/icons/rank${rank}.png`
    return (
      <Image
        src={icon}
        alt={`ranking ${rank}`}
        width={isExp ? 24 : 32}
        height={isExp ? 24 : 32}
        className={isExp ? 'h-6 w-6' : 'h-8 w-8'}
      />
    )
  }

  const onTabVote = (id: string, isExp = false) => {
    if (isExp) {
      setExpRanking((e) =>
        e.map((exp) =>
          exp.id === id
            ? {
                ...exp,
                voted: !exp.voted,
              }
            : exp,
        ),
      )
    } else {
      setToolRanking((e) =>
        e.map((tool) =>
          tool.id === id
            ? {
                ...tool,
                voted: !tool.voted,
              }
            : tool,
        ),
      )
    }
  }

  const voteDom = ({
    vote,
    voted,
    id,
    isExp = false,
  }: {
    vote: string
    voted: boolean
    id: string
    isExp?: boolean
  }) => {
    return (
      <div className='flex items-center'>
        <span className='font-medium'>{vote}</span>
        <div className='h-1 w-2'></div>
        <Button
          variant={voted ? 'primary' : 'secondary'}
          className='h-8 w-8 px-0'
          onClick={() => onTabVote(id, isExp)}
        >
          <Triangle
            fill={voted ? '#fff' : '#90979D'}
            strokeWidth={0}
            className='h-3 w-4'
          />
        </Button>
      </div>
    )
  }

  const init = () => {
    setTimeout(() => {
      setCategories1(list1)
      setCategories2(list2)
      setToolRanking(list3)
      setExpRanking(list4)
    }, 500)
  }

  useEffect(() => {
    init()
  }, [])

  return (
    <>
      <h1 className='mb-5 whitespace-pre-wrap text-center text-6xl font-semibold leading-tight'>
        {dict.index.title}
      </h1>
      <h2 className='mb-10 text-center text-t2'>{dict.index.subtitle}</h2>
      <div
        className={cn(
          'flex h-14 items-center rounded-full border bg-background px-5',
          { 'border-primary': isFocus },
        )}
      >
        <CusIcon name='search' className='h-6 w-6 text-t3' />
        <div className='h-1 w-3'></div>
        <input
          type='text'
          id='text'
          value={searchVal}
          disabled={loading}
          placeholder={dict.index.placeholder}
          className='h-full flex-1 bg-transparent placeholder-t3 outline-none'
          enterKeyHint='search'
          onChange={(e) => setSearchVal(e.target.value)}
          onFocus={() => setIsFocus(true)}
          onBlur={() => setIsFocus(false)}
          onKeyDown={handleInputKeydown}
        />
        <div className='h-1 w-3'></div>
        <Button
          className='h-10 w-10 px-0'
          onClick={onSearch}
          disabled={loading}
        >
          <CusIcon
            name={loading ? 'loader-circle' : 'arrow-right'}
            className={cn('h-4 w-4', {
              'animate-spin': loading,
            })}
          />
        </Button>
      </div>
      <ScrollArea className='mb-5 mt-10 min-h-14 w-full whitespace-nowrap'>
        <ul className='flex h-14 items-center space-x-8 border-b'>
          {categories1.map((category) => (
            <li
              key={category.id}
              onClick={() => onChangeActive1(category.id)}
              className={cn(
                'relative flex h-full shrink-0 cursor-pointer items-center px-5 font-medium hover:opacity-85',
                {
                  'text-primary': active1 === category.id,
                },
              )}
            >
              {category.text}
              {active1 === category.id && (
                <div className='absolute bottom-0 left-0 z-50 h-[2px] w-full bg-gradient-primary'></div>
              )}
            </li>
          ))}
        </ul>
        <ScrollBar orientation='horizontal' />
      </ScrollArea>
      <ScrollArea className='min-h-10 w-full whitespace-nowrap'>
        <ul className='flex h-10 items-center space-x-4'>
          {categories2.map((category) => (
            <li
              key={category.id}
              onClick={() => onChangeActive2(category.id)}
              className={cn(
                'relative flex h-full shrink-0 cursor-pointer items-center rounded-lg bg-foreground px-3 hover:opacity-85',
                {
                  'text-primary': active2 === category.id,
                },
              )}
            >
              {category.text}
            </li>
          ))}
        </ul>
        <ScrollBar orientation='horizontal' />
      </ScrollArea>
      <div className='h-10'></div>
      <div className='grid grid-cols-1 md:grid-cols-2 md:gap-10'>
        <div>
          {rankingTitleDom({
            icon: '/icons/rank_tool@2x.png',
            title: dict.index['Tool Ranking'],
            href: 'tool-ranking',
          })}
          <ul className='space-y-3 pl-4'>
            {toolRanking.map((tool, index) => (
              <li key={tool.id} className='relative rounded-xl border p-5'>
                <div className='mb-3 flex items-center justify-between'>
                  <div className='flex items-center'>
                    <div className='h-12 w-12 rounded-full bg-primary/75'></div>
                    <div className='h-1 w-3'></div>
                    <div className='flex flex-col justify-center'>
                      <div className='text-xs'>{tool.creator}</div>
                      <h4 className='text-xl font-semibold'>{tool.name}</h4>
                    </div>
                  </div>
                  <div className='h-1 w-1'></div>
                  {voteDom({ vote: tool.vote, voted: tool.voted, id: tool.id })}
                </div>
                <div className='pl-[3.75rem]'>
                  <div className='mb-3 line-clamp-2 whitespace-pre-wrap text-sm text-t2'>
                    {tool.desc}
                  </div>
                  <ul className='mb-3 flex flex-wrap items-center space-x-1'>
                    {tool.tag.map((e, index) => (
                      <li
                        key={index}
                        className='flex h-6 items-center rounded-full border bg-foreground px-3 text-xs text-t2'
                      >
                        {e}
                      </li>
                    ))}
                  </ul>
                  <div className='flex items-center text-xs font-medium leading-none'>
                    {tool.collected ? (
                      <CusIcon
                        name='star'
                        fill='#EEB244'
                        strokeWidth={0}
                        className='h-3 w-3 text-t3'
                      />
                    ) : (
                      <CusIcon name='star' className='h-3 w-3 text-t3' />
                    )}
                    <span className='mx-1 translate-y-[1px] text-t3'>
                      {dict.index.Collection}
                    </span>
                    <span className='translate-y-[1px]'>{tool.collection}</span>
                    <div className='h-1 w-5'></div>
                    <CusIcon
                      name='message-circle'
                      className='h-3 w-3 text-t3'
                    />
                    <span className='mx-1 translate-y-[1px] text-t3'>
                      {dict.index.Comment}
                    </span>
                    <span className='translate-y-[1px]'>{tool.comment}</span>
                    <div className='h-1 w-5'></div>
                    <CusIcon name='share-2' className='h-3 w-3 text-t3' />
                    <span className='mx-1 translate-y-[1px] text-t3'>
                      {dict.index.Share}
                    </span>
                  </div>
                </div>
                <Separator className='my-5' />
                <div className='flex'>
                  <CusIcon name='lightbulb' className='h-6 w-6' />
                  <div className='h-1 w-3'></div>
                  <div className='flex-1 text-sm font-medium'>{tool.tip}</div>
                </div>
                <div className='absolute left-0 top-0 -translate-x-1/2'>
                  {rankingNumDom(tool.ranking)}
                </div>
              </li>
            ))}
          </ul>
        </div>
        <div>
          {rankingTitleDom({
            icon: '/icons/rank_exp@2x.png',
            title: dict.index['Experience Ranking'],
            href: 'experience-ranking',
          })}
          <ul className='space-y-3'>
            {expRanking.map((exp, index) => (
              <li key={exp.id} className='rounded-xl border border-dashed p-5'>
                <div className='mb-5 flex items-center justify-between'>
                  <div className='flex items-center text-sm'>
                    {rankingNumDom(exp.ranking, true)}
                    <div className='h-1 w-2'></div>
                    <span className='font-medium'>@ {exp.creator}</span>
                    <span className='text-t2'>&nbsp;- {exp.job}</span>
                  </div>
                  <div className='h-1 w-1'></div>
                  {voteDom({
                    vote: exp.vote,
                    voted: exp.voted,
                    id: exp.id,
                    isExp: true,
                  })}
                </div>
                <div className='line-clamp-2 whitespace-pre-wrap text-lg font-medium leading-tight'>
                  {exp.name}
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </>
  )
}
